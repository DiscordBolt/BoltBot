plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.springframework.boot' version "$spring_boot_version"
    id 'com.google.cloud.tools.jib' version '3.4.2'
}

ext {
    github_org = 'DiscordBolt'
    project_name = 'BoltBot'
    artifact_group = 'com.discordbolt'
}

group "$artifact_group"
version "$project_version"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

bootJar {
    archiveBaseName = "$project_name"
    archiveVersion = "$project_version"
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "$spring_boot_version"
    // Spring Data
    //implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: "$spring_boot_version"
    // Spring MongoDB Reactive
    //implementation gr`oup: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb-reactive', version: "$spring_boot_version"
    // Discord4J
    implementation group: 'com.discord4j', name: 'discord4j-core', version: "$d4j_version"
    // Reflections (For BotModules)
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    // @NotNull annotations
    implementation group: 'org.checkerframework', name: 'checker', version: '3.42.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.2'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "$spring_boot_version"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.11.0'
    testImplementation group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '4.12.6'
}

processResources {
    doLast {
        file("$buildDir/resources/main/application.properties").withWriter { w ->
            Properties p = new Properties()
            p.load(new FileInputStream(new File('src/main/resources/application.properties')))
            p['boltbot.version'] = "$project_version".toString()
            p['boltbot.commit'] = getCommitHash()
            p['discord.token'] = System.getenv('DISCORD_TOKEN')
            if (System.getenv('GIT_BRANCH') != 'refs/heads/master') {
                p['spring.data.mongodb.database'] = 'BoltBot-Dev'
                p['discord.token'] = System.getenv('DISCORD_TOKEN_DEV')
            }
            p.store w, null
        }
    }
}

static def getCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

/*
 * Does not work in GitHub Actions/Workflows.
 */
static def getBranchName() {
    'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

jib {
    from {
        image = 'openjdk:21'
    }
    to {
        image = "techtony96/boltbot:$project_version-".toString() + getCommitHash()
        switch (System.getenv('GIT_BRANCH')) {
            case 'refs/heads/master':
                tags = ['latest']
                break
            case 'refs/heads/dev':
                tags = ['dev-latest']
                break
            default:
                project.logger.lifecycle('Unknown Branch: ' + System.getenv('GIT_BRANCH'))
        }
        auth {
            username = 'techtony96'
            password = System.getenv('DOCKER_PASSWORD') ?: ""
        }
    }
    container {
        jvmFlags = ['-Xms512m', '-Xmx512m']
        mainClass = 'com.discordbolt.boltbot.BoltBot'
        args = ['--spring.config.location=/app/resources/application.properties']
    }
}
